-- Create tables if not exists
CREATE TABLE IF NOT EXISTS STUDENT (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(40) NOT NULL,
    EMAIL VARCHAR(60) NOT NULL UNIQUE,
    CONTACT VARCHAR(10) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS TEACHER(
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(40) NOT NULL,
    EMAIL VARCHAR(60) NOT NULL,
    CONTACT VARCHAR(10) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS address (
    address_id INT PRIMARY KEY AUTO_INCREMENT,
    street VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    country VARCHAR(255),
    pincode VARCHAR(6),
    student_id INT,
    teacher_id INT,
    CONSTRAINT chk_one_owner CHECK (
        (student_id IS NOT NULL AND teacher_id IS NULL) OR
        (student_id IS NULL AND teacher_id IS NOT NULL)
    ),
    FOREIGN KEY (student_id) REFERENCES student(id) ON DELETE CASCADE,
    FOREIGN KEY (teacher_id) REFERENCES teacher(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS EXAM(
    EXAM_ID INT PRIMARY KEY AUTO_INCREMENT,
    TEACHER_ID INT NOT NULL,
    EXAM_NAME VARCHAR(255) NOT NULL,
    EXAM_TIME DATETIME NOT NULL,
    FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER(ID)
);

CREATE TABLE IF NOT EXISTS QUESTION(
    QUESTION_ID INT PRIMARY KEY AUTO_INCREMENT,
    EXAM_ID INT NOT NULL,
    QUESTION_TEXT TEXT NOT NULL,
    KEYWORDS VARCHAR(255),
    MARKS INT NOT NULL,
    FOREIGN KEY (EXAM_ID) REFERENCES EXAM(EXAM_ID)
);

CREATE TABLE IF NOT EXISTS FOLLOWS(
    T_ID INT,
    S_ID INT,
    PRIMARY KEY(T_ID, S_ID),
    FOREIGN KEY(T_ID) REFERENCES TEACHER(ID),
    FOREIGN KEY(S_ID) REFERENCES STUDENT(ID)
);



CREATE TABLE IF NOT EXISTS ATTEMPT (
    S_ID INT,
    EXAM_ID INT,
    MARKS INT,
    EXAM_RANK INT,
    FOREIGN KEY (S_ID) REFERENCES STUDENT(ID),
    FOREIGN KEY (EXAM_ID) REFERENCES EXAM(EXAM_ID)
);


DROP TRIGGER IF EXISTS calculate_exam_rank;


CREATE TRIGGER calculate_exam_rank
BEFORE INSERT ON ATTEMPT
FOR EACH ROW
BEGIN
    DECLARE exam_rank INT;
    
    SELECT COALESCE(MAX(rank_val), 0) + 1 INTO exam_rank
    FROM (
        SELECT 
            RANK() OVER (ORDER BY MARKS DESC) as rank_val
        FROM ATTEMPT
        WHERE EXAM_ID = NEW.EXAM_ID
    ) AS ranked;
    
    SET NEW.EXAM_RANK = exam_rank;
END;